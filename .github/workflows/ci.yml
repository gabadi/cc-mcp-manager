name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23.x-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23.x-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23.x-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23.x-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      run: |
        mkdir -p dist
        go build -ldflags="-s -w" -o dist/cc-mcp-manager ./main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cc-mcp-manager
        path: dist/cc-mcp-manager

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: test  # Run after test completes successfully
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, build, lint]  # All jobs must complete successfully
    if: always()
    
    steps:
    - name: Check job results
      run: |
        if [ "${{ needs.test.result }}" != "success" ] || [ "${{ needs.build.result }}" != "success" ] || [ "${{ needs.lint.result }}" != "success" ]; then
          echo "Quality gate failed: One or more required jobs failed"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          exit 1
        fi
        echo "Quality gate passed: All required jobs succeeded"